
worker_rlimit_core 500m;
worker_rlimit_nofile 10000;
working_directory /tmp/;

user www-data;
worker_processes auto;

error_log /var/log/nginx/error_log warn;

pid /var/run/nginx.pid;

env REDIS_HOST;
env REDIS_PORT;
env KUBERNETES_SERVICE_HOST;
env KUBERNETES_SERVICE_PORT;
env KUBERNETES_SERVICE_TOKEN;
env KUBERNETES_POD_NAMESPACE;
env KUBERNETES_POD_APP_LABEL;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {

    include mime.types;
    default_type application/octet-stream;

    uninitialized_variable_warn off;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $bytes_sent $request_time "$http_referer" "$http_user_agent" "$scheme" '
        '"$http_host" $pid $request_length "$sent_http_content_range" "$http_x_forwarded_for" '
        '"$http_x_forwarded_server" "$http_x_forwarded_host" "$sent_http_cache_control" '
        '$connection $request_id $persist_status "$persist_key" "$upstream_addr" '
        '$upstream_connect_time $upstream_header_time';

    access_log /var/log/nginx/access_log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout 60;
    keepalive_requests 1000;
    client_header_timeout 20;
    client_body_timeout 20;
    reset_timedout_connection on;
    send_timeout 20;
    server_tokens off;

    gzip on;
    gzip_types application/vnd.apple.mpegurl video/f4m application/dash+xml text/xml text/vtt;
    gzip_proxied any;

    more_set_headers 'X-Proxy-Me: $hostname';
    more_set_headers 'X-Proxy-Session: $request_id';

    proxy_connect_timeout 1s;
    proxy_send_timeout 5s;
    proxy_read_timeout 180s;
    proxy_buffers 16 16k;
    proxy_buffer_size 16k;
    proxy_max_temp_file_size 0;

    proxy_set_header Host $http_host;
    proxy_set_header Connection "";
    proxy_set_header Accept-Encoding "";
    proxy_http_version 1.1;

    resolver local=on;

    lua_package_path "/usr/local/src/lua-resty-http/lib/?.lua;/usr/local/openresty/nginx/conf/?.lua;;";

    lua_shared_dict servers 8m;
    lua_shared_dict persist_cache 32m;

    init_worker_by_lua_block {
        local persistlb = require('persistlb')
        local getenv = os.getenv
        local namespace = getenv('KUBERNETES_POD_NAMESPACE') or 'vod'

        local options = {
            srv_dict = ngx.shared.servers,
            cache_dict = ngx.shared.persist_cache,
            redis_host = getenv('REDIS_HOST'),
            redis_port = getenv('REDIS_PORT'),
            k8s = {
                host = getenv('KUBERNETES_SERVICE_HOST'),
                port = getenv('KUBERNETES_SERVICE_PORT'),
                token = getenv('KUBERNETES_SERVICE_TOKEN'),
                namespace = namespace,
            },
            persist_prefix = 'persist_' .. namespace .. '_'
        }

        local label = getenv('KUBERNETES_POD_APP_LABEL')
        if label then
            options.k8s.label_selector = 'app=' .. label
        end

        persistlb:new(options)

        local metrics = require('metrics')

        metrics:new({
            dict = ngx.shared.servers,
        })
    }

    log_by_lua_block {
        local metrics = require('metrics')
        metrics.log()

        local balancer = ngx.ctx.balancer
        if balancer then
            balancer:log()
        end
    }

    upstream backend {
        server 127.0.0.1;

        balancer_by_lua_block {
            ngx.ctx.balancer:balance()
        }

        keepalive 128;
    }

    map $uri $persist_key {
        "~/entryId/(?<key>[^/]+)/"                         $key;
        "~^/(remotethumb|remotevolume)(?<key>/.*)/[^/]+$"  $key;
        default                                            "";
    }

    server {
        listen 80;
        listen 443 ssl;
        server_name vodlb;

        ssl_certificate     /usr/local/openresty/nginx/conf/ssl/proxy.crt;
        ssl_certificate_key /usr/local/openresty/nginx/conf/ssl/proxy.pem;
        ssl_session_timeout 5m;

        set $persist_status '-';

        # entry id stickiness
        location / {

            rewrite_by_lua_block {
                local persistlb = require('persistlb')

                ngx.ctx.balancer = persistlb.get_req_balancer(ngx.var.persist_key)
            }

            proxy_pass http://backend;

            header_filter_by_lua_block {
                local balancer = ngx.ctx.balancer
                if balancer then
                    balancer:header_filter()
                end
            }
        }

        # nginx status page
        location = /nginx_status {
            allow 127.0.0.1/32;
            deny all;

            stub_status on;
        }

        # prom metrics
        location = /metrics {
            allow 127.0.0.1/32;
            deny all;

            content_by_lua_block {
                local persistlb = require('persistlb')
                ngx.say(persistlb.get_status())

                local metrics = require('metrics')
                ngx.say(metrics.get_status('upstream'))

                local status = require('status')
                ngx.say(status.format_status('/nginx_status'))
            }
        }
    }
}
